import { chmodSync, existsSync, readFileSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'

export interface SetupHookOptions {
	cwd?: string
	hookType?: 'compose-before-commit'
}

const HOOK_CONFIGS = {
	'compose-before-commit': {
		name: 'pre-commit',
		command:
			'npx agents-md compose && find . -name "AGENTS.md" -type f -exec git add {} \\;',
		description: 'Compose AGENTS.md files and stage them before commit',
	},
}

/**
 * Setup git hook directly in .git/hooks
 */
export async function setupHook(
	options: SetupHookOptions = {},
): Promise<{ success: boolean; message: string }> {
	const cwd = options.cwd || process.cwd()
	const hookType = options.hookType || 'compose-before-commit'

	// Get hook configuration
	const hookConfig = HOOK_CONFIGS[hookType]
	if (!hookConfig) {
		return {
			success: false,
			message: `Unknown hook type: ${hookType}`,
		}
	}

	// Check if .git exists
	if (!existsSync(join(cwd, '.git'))) {
		return {
			success: false,
			message: 'Not a git repository (no .git directory found)',
		}
	}

	const gitHooksDir = join(cwd, '.git', 'hooks')
	const hookPath = join(gitHooksDir, hookConfig.name)

	// Create the hook script
	const hookScript = `#!/bin/sh
#
# agents-md ${hookConfig.name} hook
# Auto-generated by: npx agents-md setup:compose-before-commit
#
# To regenerate: npx agents-md setup:compose-before-commit
# To bypass: git commit --no-verify
#

${hookConfig.command}
`

	try {
		// Check if hook already exists
		if (existsSync(hookPath)) {
			const existing = readFileSync(hookPath, 'utf-8')
			if (existing.includes('agents-md compose')) {
				return {
					success: true,
					message: `Hook already configured in ${hookConfig.name}`,
				}
			}
			// Hook exists but doesn't have our command - warn user
			return {
				success: false,
				message: `${hookConfig.name} hook already exists. Please add this command manually:\n  ${hookConfig.command}\n\nOr remove the existing hook and run this command again.`,
			}
		}

		// Write the hook
		writeFileSync(hookPath, hookScript, 'utf-8')
		chmodSync(hookPath, 0o755) // Make executable

		return {
			success: true,
			message: `Successfully configured ${hookConfig.name} hook: ${hookConfig.description}`,
		}
	} catch (error) {
		return {
			success: false,
			message: `Failed to create git hook: ${error}`,
		}
	}
}
